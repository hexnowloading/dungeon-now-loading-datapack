from beet.contrib.vanilla import Vanilla

def get_model_cmd(id):
    abs_id = abs(id)

    if abs_id < 10000:
        num = str(3030000 + abs_id)
    elif abs_id < 100000:
        num = str ("30") + str(abs_id)
    elif abs_id < 1000000:
        num = str ("3") + str(abs_id)
    elif abs_id < 10000000:
        num = str(abs_id)

    if id < 0:
        cmd = "-" + num
    else:
        cmd = num

    return cmd

def get_model_nbt(item, id):
    cmd = get_model_cmd(id)
    cmd_tag = "CustomModelData: " + cmd + ", "
    name = "name: '" + str(item) + "'"
    is_item = ", item: 1"
    item_id = ", id: " + str(id)
    nbt = "{" + cmd_tag + "dnl: {" + name + is_item + item_id + "}}"
    return nbt

# ---- #
vanilla = ctx.inject(Vanilla)
models_jar = vanilla.mount("assets/minecraft/models/item")

def add_model_custom_model_data(custom_item_name, id, base_item, custom_model):
    model_path = f"dnl:mob/{custom_item_name}"

    base_item_location = f"minecraft:item/{base_item}"
    
    models = ctx.assets.models

    existing_model = models.get(base_item_location, None)

    if not existing_model:
        existing_model = models_jar.assets.models[base_item_location].copy()
        models[base_item_location] = existing_model

    cmd_id = int(get_model_cmd(id))

    if base_item == "bow":
        pulling_0_path = f"dnl:item/{custom_item_name}/pulling_0"
        pulling_1_path = f"dnl:item/{custom_item_name}/pulling_1"
        pulling_2_path = f"dnl:item/{custom_item_name}/pulling_2"

        merge model base_item_location {
            # **existing_model.data,
            "overrides": [
                {"predicate": {"custom_model_data": cmd_id}, "model": model_path},
                {"predicate": {"custom_model_data": cmd_id, "pulling": 1}, "model": pulling_0_path},
                {"predicate": {"custom_model_data": cmd_id, "pulling": 1, "pull": 0.65}, "model": pulling_1_path},
                {"predicate": {"custom_model_data": cmd_id, "pulling": 1, "pull": 0.9}, "model": pulling_2_path}
            ]
        }
    elif base_item == "crossbow":
        pulling_0_path = f"dnl:item/{custom_item_name}/pulling_0"
        pulling_1_path = f"dnl:item/{custom_item_name}/pulling_1"
        pulling_2_path = f"dnl:item/{custom_item_name}/pulling_2"
        load_arrow = f"dnl:item/{custom_item_name}/arrow"
        load_firework = f"dnl:item/{custom_item_name}/firework"

        merge model base_item_location {
            # **existing_model.data,
            "overrides": [
                {"predicate": {"custom_model_data": cmd_id}, "model": model_path},
                {"predicate": {"custom_model_data": cmd_id, "pulling": 1}, "model": pulling_0_path},
                {"predicate": {"custom_model_data": cmd_id, "pulling": 1, "pull": 0.58}, "model": pulling_1_path},
                {"predicate": {"custom_model_data": cmd_id, "pulling": 1, "pull": 1.0}, "model": pulling_2_path},
                {"predicate": {"custom_model_data": cmd_id, "charged": 1}, "model": load_arrow},
                {"predicate": {"custom_model_data": cmd_id, "charged": 1, "firework": 1}, "model": load_firework}
            ]
        }
    else:
        merge model base_item_location {
            # **existing_model.data,
            "overrides": [
                {"predicate": {"custom_model_data": cmd_id}, "model": model_path},
            ]
        }
    if custom_model == "false":
        if base_item == "bow":
            model model_path {
                "parent": "minecraft:item/bow",
                "textures": {
                    "layer0": model_path
                },
                "display": {
                    "thirdperson_righthand": {
                        "rotation": [ -80, 260, -40 ],
                        "translation": [ -1, -2, 2.5 ],
                        "scale": [ 0.9, 0.9, 0.9 ]
                    },
                    "thirdperson_lefthand": {
                        "rotation": [ -80, -280, 40 ],
                        "translation": [ -1, -2, 2.5 ],
                        "scale": [ 0.9, 0.9, 0.9 ]
                    },
                    "firstperson_righthand": {
                        "rotation": [ 0, -90, 25 ],
                        "translation": [ 1.13, 3.2, 1.13],
                        "scale": [ 0.68, 0.68, 0.68 ]
                    },
                    "firstperson_lefthand": {
                        "rotation": [ 0, 90, -25 ],
                        "translation": [ 1.13, 3.2, 1.13],
                        "scale": [ 0.68, 0.68, 0.68 ]
                    }
                },
                "overrides": [
                    {"predicate": {"custom_model_data": cmd_id, "pulling": 1}, "model": pulling_0_path},
                    {"predicate": {"custom_model_data": cmd_id, "pulling": 1, "pull": 0.65}, "model": pulling_1_path},
                    {"predicate": {"custom_model_data": cmd_id, "pulling": 1, "pull": 0.9}, "model": pulling_2_path}
                ]
            }
            model pulling_0_path {
                "parent": model_path,
                "textures": {
                    "layer0": pulling_0_path
                }
            }
            model pulling_1_path {
                "parent": model_path,
                "textures": {
                    "layer0": pulling_1_path
                }
            }
            model pulling_2_path {
                "parent": model_path,
                "textures": {
                    "layer0": pulling_2_path
                }
            }
        elif base_item == "crossbow":
            model model_path {
                "parent": "item/generated",
                "textures": {
                    "layer0": model_path
                },
                "display": {
                    "thirdperson_righthand": {
                        "rotation": [ -90, 0, -60 ],
                        "translation": [ 2, 0.1, -3 ],
                        "scale": [ 0.9, 0.9, 0.9 ]
                    },
                    "thirdperson_lefthand": {
                        "rotation": [ -90, 0, 30 ],
                        "translation": [ 2, 0.1, -3 ],
                        "scale": [ 0.9, 0.9, 0.9 ]
                    },
                    "firstperson_righthand": {
                        "rotation": [ -90, 0, -55 ],
                        "translation": [ 1.13, 3.2, 1.13],
                        "scale": [ 0.68, 0.68, 0.68 ]
                    },
                    "firstperson_lefthand": {
                        "rotation": [ -90, 0, 35 ],
                        "translation": [ 1.13, 3.2, 1.13],
                        "scale": [ 0.68, 0.68, 0.68 ]
                    }
                },
                "overrides": [
                    {"predicate": {"custom_model_data": cmd_id, "pulling": 1}, "model": pulling_0_path},
                    {"predicate": {"custom_model_data": cmd_id, "pulling": 1, "pull": 0.58}, "model": pulling_1_path},
                    {"predicate": {"custom_model_data": cmd_id, "pulling": 1, "pull": 1.0}, "model": pulling_2_path},
                    {"predicate": {"custom_model_data": cmd_id, "charged": 1}, "model": load_arrow},
                    {"predicate": {"custom_model_data": cmd_id, "charged": 1, "firework": 1}, "model": load_firework}
                ]
            }
            model pulling_0_path {
                "parent": model_path,
                "textures": {
                    "layer0": pulling_0_path
                }
            }
            model pulling_1_path {
                "parent": model_path,
                "textures": {
                    "layer0": pulling_1_path
                }
            }
            model pulling_2_path {
                "parent": model_path,
                "textures": {
                    "layer0": pulling_2_path
                }
            }
            model load_arrow {
                "parent": model_path,
                "textures": {
                    "layer0": load_arrow
                }
            }
            model load_firework {
                "parent": model_path,
                "textures": {
                    "layer0": load_firework
                }
            }
        else:
            model model_path {
                **existing_model.data,
                "textures": {
                    "layer0": model_path
                }
            }

id_blank = ctx.meta.util.blank

add_model_custom_model_data("util/blank/white_dye", id_blank, "white_dye", "false")
add_model_custom_model_data("util/blank/snowball", id_blank, "snowball", "false")